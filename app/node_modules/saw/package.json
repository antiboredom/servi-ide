{
  "name": "saw",
  "version": "1.0.7",
  "description": "actually working file tree watching library",
  "main": "index.js",
  "dependencies": {
    "glob": "^4.0.0",
    "lru-cache": "^2.5.0",
    "minimatch": "^0.3.0"
  },
  "devDependencies": {
    "mocha": "*",
    "mkdirp": "~0.3.5",
    "rimraf": "~2.1.4",
    "idgen": "~1.2.0",
    "sinon": "~1.7.3"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/carlos8f/saw.git"
  },
  "homepage": "https://github.com/carlos8f/saw",
  "keywords": [
    "file",
    "watcher",
    "watch",
    "directory",
    "change"
  ],
  "author": {
    "name": "Carlos Rodriguez",
    "email": "carlos@s8f.org",
    "url": "http://s8f.org/"
  },
  "license": "MIT",
  "readme": "saw\n===\n\nactually working file tree watching library\n\n[![build status](https://secure.travis-ci.org/carlos8f/saw.png)](http://travis-ci.org/carlos8f/saw)\n\nWatch for changes in a file tree. I wrote this because in my search for an\nactually reliable/working watcher library on npm, I kept coming up short. This\nimplementation is brief and accomplishes its goal reliably.\n\n## Rationale\n\nFile/directory watching in node.js is notoriously bad. For example:\n\n1. `fs.watch()` when used on a directory, might not tell you what file changed.\n   Just that \"something\" in the directory changed. Depending on the platform.\n   Useless.\n2. If you're lucky enough to get a filename from `fs.watch()`, you're in the\n   dark on whether that file is actually a directory. Or any other details on\n   the file in question. Useless.\n3. `fs.watch()` does not detect adds, removes, or updates specifically. Just\n   \"change\". Useless.\n4. `fs.watch()` when used on a directory, only watches one level deep. It's up\n   to you to create more watch instances for subdirectories. Useless.\n5. `fs.watchFile()`, the alternative to `fs.watch()`, when used on a directory,\n   doesn't give you the filename of the change either. Also it uses polling\n   which is obviously hacky and defeats the goal of an evented watcher. Useless.\n\nMoreover, npm-level watching libraries that attempt to remedy the above have\nannoying caveats, such as:\n\n1. Events aren't emitted in some cases, especially relating to subdirectories\n2. Events are duplicated in some cases (`fs.watch()` is also guilty of this)\n3. Poor error handling such as not accounting for ENOFILE (race condition from\n   deletion) or EMFILE (large directory trees)\n4. Deletes of directories poorly handled -- you might get notified that a directory\n   was deleted, but not notified of each file in that directory\n5. Lack of node 0.10 support\n6. May require you to add files, directories, or patterns manually to the watcher\n7. Getting fancy with globs/filters, when the best separation of concerns is for\n   a watching library to just watch and tell you the filename and what happened.\n8. Wonky APIs which try to reinvent `fs.Stats` or are generally over-engineered\n9. Lack of documentation or commitment from author\n10. Being written in, ahem, coffee-script\n11. Et cetera!\n\n`saw` takes a very simple and reliable approach which consists of:\n\n1. Recursing through the directory given\n2. Applying `fs.watch()` to all newly detected files\n3. Caching `fs.Stats` instances for all files\n4. Comparing the file tree with the last scan (if available) and emitting events\n   based on the difference\n5. Performing steps 1-4 on the changed dir (or parent of the changed file) when\n   `fs.watch()` triggers an event.\n\n## Usage\n\n```js\nvar saw = require('saw');\n\nsaw('path/to/dir', {options: 'are optional'})\n  .on('ready', function (files) {\n    // watcher is active. `files` is an array of file objects (details below).\n  })\n  .on('add', function (file) {\n    // `file.path` = relative path from root dir\n    // `file.fullPath` = absolute path\n    // `file.name` = file name\n    // `file.stat` = instance of `fs.Stats`\n    // `file.parentDir` = relative parent dir\n    // `file.fullParentDir` = absolute parent dir\n  })\n  .on('remove', function (file) {\n    // file was removed\n  })\n  .on('update', function (file) {\n    // file was updated\n    // caveat: updates within a millisecond after the file was added or updated\n    // can't be detected\n  })\n  .on('all', function (ev, file) {\n    // catchall - `ev` is the event name.\n  })\n  // to unwatch all files, call close():\n  .close()\n```\n\n## Tips\n\n- You can also pass a [glob pattern](https://www.npmjs.org/package/glob) or array\n  of glob patterns as the first argument.\n- You can omit the first argument to watch the current working directory.\n- The `file` object is the same as returned by\n  [readdirp](https://github.com/thlorenz/readdirp#entry-info).\n\n## Options\n\n- `cwd` (String, default: first argument or `process.cwd()` if first argument isn't a directory),\n  the directory to consider as root for relative paths.\n- `persistent` (Boolean, default: `true`), whether or not to keep the process\n  open when watching is active.\n- `dot` (Boolean, default: `false`), whether or not to watch dotfiles.\n- `cache` (Object), options to pass to [lru-cache](https://www.npmjs.org/package/lru-cache).\n\n- - -\n\n### Developed by [Terra Eclipse](http://www.terraeclipse.com)\nTerra Eclipse, Inc. is a nationally recognized political technology and\nstrategy firm located in Aptos, CA and Washington, D.C.\n\n- - -\n\n### License: MIT\n\n- Copyright (C) 2013-14 Carlos Rodriguez (http://s8f.org/)\n- Copyright (C) 2013-14 Terra Eclipse, Inc. (http://www.terraeclipse.com/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/carlos8f/saw/issues"
  },
  "_id": "saw@1.0.7",
  "dist": {
    "shasum": "c17ad67f9e663e8b1e27c3c38417e01f445d2a66"
  },
  "_from": "saw@",
  "_resolved": "https://registry.npmjs.org/saw/-/saw-1.0.7.tgz"
}
